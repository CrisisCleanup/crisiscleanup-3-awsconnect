service: crisiscleanup-3-awsconnect

package:
  individually: false
  exclude:
    - node_modules/**
    - '!node_modules/node-fetch/**'
    - ./**
    - '!src/**'
    - '!package.json'
    - '!yarn.lock'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  logRetentionInDays: 30
  timeout: 10
  logs:
    websocket:
      level: INFO
  tracing:
    apiGateway: false
    lambda: true
  websocketsApiName: crisiscleanup-3-awsconnect-ws
  websocketsApiRouteSelectionExpression: $request.body.action
  vpc:
    securityGroupIds:
      - !Ref ProfileServiceSecurityGroup
    subnetIds:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2
  deploymentBucket:
    name: sls-bucket-awsconnect-${self:custom.stage}
  iamManagedPolicies: ${file(resources/roles.yml):Policies}
  iamRoleStatements: ${file(resources/roles.yml):RoleStatements}

plugins:
  - serverless-webpack
  - serverless-plugin-warmup
  - serverless-dotenv-plugin
  - serverless-newrelic-lambda-layers
  - serverless-prune-plugin
  - serverless-dynamodb-local
  - serverless-domain-manager
  - serverless-deployment-bucket
  - serverless-localstack
  - serverless-stack-output
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}
  dynamic: ${file(config.js)}
  prefix: ccu-connect-${self:custom.stage}
  prefix-short: ccucon-${self:custom.stage}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packager: 'yarn'
  newRelic:
    enableIntegration: true
    accountId: 2727761
    logEnabled: true
    cloudWatchFilter: '*'
    apiKey: ${env:RELIC_API_KEY}
  warmup:
    enabled:
      - staging
      - prod
    events:
      # Run WarmUp every 5 minutes Mon-Fri between 8:00am and 8:55pm (UTC)
      - schedule: 'cron(0/5 8-20 ? * MON-FRI *)'
    prewarm: true
    concurrency: ${self:custom.lambda.warmupConcurrency}
  prune:
    automatic: true
    number: 2
  dynamodb:
    stages:
      - local
    start:
      migrate: true
      noStart: true
  customDomain: ${self:custom.dynamic.domain}
  dax: ${self:custom.dynamic.dax}
  lambda: ${self:custom.dynamic.lambda}
  output:
    file: .build/stack.yml
  localstack:
    stages:
      - local
    autostart: false

functions:
  awsConnect:
    memorySize: 256
    provisionedConcurrency: ${self:custom.lambda.awsConnect.provisioned}
    handler: src/index.default

  connectionHandler:
    handler: src/index.wsConnectionHandler
    provisionedConcurrency: ${self:custom.lambda.provisioned}
    memorySize: 512
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect

  wsHandler:
    memorySize: 512
    provisionedConcurrency: ${self:custom.lambda.wsHandler.provisioned}
    handler: src/index.wsHandler
    events:
      - websocket: $default

  metricStreamHandler:
    memorySize: 256
    provisionedConcurrency: ${self:custom.lambda.provisioned}
    handler: src/index.metricStreamHandler

  contactStreamHandler:
    memorySize: 256
    provisionedConcurrency: ${self:custom.lambda.provisioned}
    handler: src/index.contactStreamHandler

  agentStreamHandler:
    memorySize: 256
    provisionedConcurrency: ${self:custom.lambda.provisioned}
    handler: src/index.agentStreamHandler

  clientStreamHandler:
    memorySize: 256
    provisionedConcurrency: ${self:custom.lambda.provisioned}
    handler: src/index.clientStreamHandler

resources:
  - Resources:
      # Connect Metrics Table
      metricsTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: connect-metrics-table-${self:custom.stage}
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            - AttributeName: type
              AttributeType: S
            - AttributeName: name
              AttributeType: S
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: name
              KeyType: RANGE
          StreamSpecification:
            StreamViewType: NEW_IMAGE
      agentsTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: connect-agents-table-${self:custom.stage}
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            - AttributeName: agent_id
              AttributeType: S
            - AttributeName: state
              AttributeType: S
            - AttributeName: current_contact_id
              AttributeType: S
            - AttributeName: active
              AttributeType: S
            - AttributeName: connection_id
              AttributeType: S
          KeySchema:
            - AttributeName: agent_id
              KeyType: HASH
          StreamSpecification:
            StreamViewType: NEW_AND_OLD_IMAGES
          GlobalSecondaryIndexes:
            - IndexName: state-index
              KeySchema:
                - AttributeName: active
                  KeyType: HASH
                - AttributeName: state
                  KeyType: RANGE
              Projection:
                ProjectionType: ALL
            - IndexName: contact-index
              KeySchema:
                - AttributeName: current_contact_id
                  KeyType: HASH
              Projection:
                ProjectionType: ALL
            - IndexName: connection-index
              KeySchema:
                - AttributeName: connection_id
                  KeyType: HASH
              Projection:
                ProjectionType: ALL
      contactsTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: connect-contacts-table-${self:custom.stage}
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            - AttributeName: contact_id
              AttributeType: S
            - AttributeName: state
              AttributeType: S
          KeySchema:
            - AttributeName: contact_id
              KeyType: HASH
          StreamSpecification:
            StreamViewType: NEW_AND_OLD_IMAGES
          GlobalSecondaryIndexes:
            - IndexName: state-index
              KeySchema:
                - AttributeName: state
                  KeyType: HASH
                - AttributeName: contact_id
                  KeyType: RANGE
              Projection:
                ProjectionType: ALL
          TimeToLiveSpecification:
            AttributeName: ttl
            Enabled: true
      clientsTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: connect-clients-table-${self:custom.stage}
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            - AttributeName: connection_id
              AttributeType: S
            - AttributeName: client_type
              AttributeType: S
            - AttributeName: user_id
              AttributeType: S
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          GlobalSecondaryIndexes:
            - IndexName: type-index
              KeySchema:
                - AttributeName: client_type
                  KeyType: HASH
                - AttributeName: connection_id
                  KeyType: RANGE
              Projection:
                ProjectionType: ALL
            - IndexName: connection-index
              KeySchema:
                - AttributeName: connection_id
                  KeyType: HASH
              Projection:
                ProjectionType: ALL
          StreamSpecification:
            StreamViewType: NEW_AND_OLD_IMAGES
          TimeToLiveSpecification:
            AttributeName: ttl
            Enabled: true

  - Resources:
      WebsocketApiMapping: ${self:custom.dynamic.resources.apiMapping}
      LambdaEventSourceMappingMetricsTable: ${self:custom.dynamic.resources.metricsEventMap}
      LambdaEventSourceMappingContactsTable: ${self:custom.dynamic.resources.contactsEventMap}
      LambdaEventSourceMappingAgentsTable: ${self:custom.dynamic.resources.agentsEventMap}
      LambdaEventSourceMappingClientsTable: ${self:custom.dynamic.resources.clientsEventMap}

  # VPC Config
  - ${file(resources/vpc.yml)}
  # DAX Config
#  - ${file(resources/dax.yml)}
