name: crisiscleanup-3-awsconnect

service: crisiscleanup-3-awsconnect
app: crisiscleanup-3-awsconnect
org: crisiscleanup

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  log:
    websocket: true
  tracing:
    lambda: true
  websocketsApiName: crisiscleanup-3-awsconnect-ws
  websocketsApiRouteSelectionExpression: $request.body.action
  iamManagedPolicies:
    - ${cf:serverless-domain-manager-awsconnect.ServerlessDomainManagerDeployPolicyArn}

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource:
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:lambda'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'function:${self:service}-${self:custom.stage}-*'
    - Effect: 'Allow'
      Action:
        - 'execute-api:*'
      Resource:
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:execute-api'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - '*'
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:logs'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'log-group:/aws/lambda/*:*:*'
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:logs'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'log-group:/aws/websocket/*:*:*'
    - Effect: 'Allow'
      Action:
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:GetItem'
        - 'dynamodb:BatchGetItem'
      Resource:
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'table/connect-*'
plugins:
  - serverless-webpack
  - serverless-plugin-warmup
  - serverless-dotenv-plugin
  - serverless-prune-plugin
  - serverless-dynamodb-local
  - serverless-domain-manager
  - serverless-stack-output
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}
  dynamic: ${file(config.js)}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packager: 'yarn'
  warmup:
    enabled: true
    events:
      # Run WarmUp every 5 minutes Mon-Fri between 8:00am and 5:55pm (UTC)
      - schedule: 'cron(0/5 8-17 ? * MON-FRI *)'
    prewarm: true
    concurrency: 1
  prune:
    automatic: true
    number: 5
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migration: true
  customDomain: ${self:custom.dynamic.domain}
  output:
    file: .build/stack.yml

functions:
  awsConnect:
    provisionedConcurrency: 3
    reservedConcurrency: 5
    handler: src/index.default
    onError: !Ref ConnectErrorsTopic

  connectionHandler:
    handler: src/index.wsConnectionHandler
    provisionedConcurrency: 3
    reservedConcurrency: 5
    memorySize: 512
    onError: !Ref ConnectErrorsTopic
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
  wsHandler:
    provisionedConcurrency: 3
    reservedConcurrency: 5
    handler: src/index.wsHandler
    onError: !Ref ConnectErrorsTopic
    events:
      - websocket: $default

  metricStreamHandler:
    provisionedConcurrency: 10
    reservedConcurrency: 15
    handler: src/index.metricStreamHandler
    onError: !Ref ConnectErrorsTopic

  contactStreamHandler:
    provisionedConcurrency: 3
    reservedConcurrency: 5
    handler: src/index.contactStreamHandler
    onError: !Ref ConnectErrorsTopic

resources:
  Resources:
    # Connect Metrics Table
    metricsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: connect-metrics-table-${self:custom.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: type
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: type
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
    agentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: connect-agents-table-${self:custom.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: agent_id
            AttributeType: S
          - AttributeName: state
            AttributeType: S
          - AttributeName: current_contact_id
            AttributeType: S
          - AttributeName: active
            AttributeType: S
        KeySchema:
          - AttributeName: agent_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: state-index
            KeySchema:
              - AttributeName: active
                KeyType: HASH
              - AttributeName: state
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: contact-index
            KeySchema:
              - AttributeName: current_contact_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    contactsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: connect-contacts-table-${self:custom.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: contact_id
            AttributeType: S
          - AttributeName: state
            AttributeType: S
        KeySchema:
          - AttributeName: contact_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: state-index
            KeySchema:
              - AttributeName: state
                KeyType: HASH
              - AttributeName: contact_id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
    clientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: connect-clients-table-${self:custom.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: connection_id
            AttributeType: S
          - AttributeName: client_type
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: type-index
            KeySchema:
              - AttributeName: client_type
                KeyType: HASH
              - AttributeName: connection_id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    ConnectErrorsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: AWSConnectErrorTopic-${self:custom.stage}
