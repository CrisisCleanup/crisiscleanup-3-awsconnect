Resources:
  # VPC containing 3 subnets, 1 is public, while the other 2 are private
  CCUConVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
        - Key: Name
          Value: ${self:custom.prefix}-vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CCUConVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: ${self:custom.prefix}-public-subnet1

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CCUConVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: ${self:custom.prefix}-private-subnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CCUConVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: ${self:custom.prefix}-private-subnet2

  # Setup connectivity by creating an internet GW + NAT
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ${self:custom.prefix}-igw

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref CCUConVPC

  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # Create private routing table that connects the private subnets to the NAT
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CCUConVPC
      Tags:
        - Key: Name
          Value: rt-to-nat

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  Private1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  Private2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # Create a public routing table that connects the public subnet to the IGW
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CCUConVPC
      Tags:
        - Key: Name
          Value: rt-to-igw

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Public1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  ProfileServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: profile-service-sg
      GroupDescription: Allow https to client host
      VpcId: !Ref CCUConVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8111'
          ToPort: '8111'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Profile service security group

  CCUConSubnetGroup:
    Type: AWS::DAX::SubnetGroup
    Properties:
      Description: Subnet Group for CCUConnect
      SubnetGroupName: ${self:custom.prefix}-group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

Outputs:
  PrivateSubnet1:
    Description: Private Subnet ID 1
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: Private Subnet ID 2
    Value: !Ref PrivateSubnet2

  SecurityGroup:
    Description: Security group for the lambda service
    Value: !Ref ProfileServiceSecurityGroup
